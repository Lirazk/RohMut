K = input$K2,
q = input$q2,
n = input$N2)
}
cat(sprintf("Relative risk reduction: %.2f\n", temp))
cat(sprintf("Absolute risk reduction: %.2f", temp * input$K2))
}
else if (input$type2 == "Conditional") {
temp <-
risk_reduction_lowest_conditional(
input$r2,
K = input$K2,
n = input$N2,
qf = input$qf2,
qm = input$qm2,
relative = T,
parental_avg_given = F
)
if (input$lowestexclude2 != "Lowest") {
temp <-
risk_reduction_exclude_conditional(
input$r2,
K = input$K2,
q = input$q2,
n = input$N2,
qf = input$qf2,
qm = input$qm2,
relative = T
)
}
cat(sprintf("Relative risk reduction: %.2f\n", temp))
cat(sprintf("Absolute risk reduction: %.2f", temp * input$K2))
}
else {
if (input$r2 > input$h2) {
updateNumericInput(session, "input_r2", value = input$h2)
updateSliderInput(session, "r2", value = input$h2)
}
if (input$r2 <= input$h2) {
if (input$lowestexclude2 != "Lowest") {
temp <-
risk_reduction_exclude_family_history2(
input$r2,
h2 = input$h2,
K = input$K2,
q = input$q2,
n = input$N2,
input$df2,
input$dm2,
n_samples = input$samples
)
}
else {
temp <-
risk_reduction_lowest_family_history2(
input$r2,
h2 = input$h2,
K = input$K2,
n = input$N2,
input$df2,
input$dm2,
n_samples = input$samples
)
}
cat(
sprintf(
"Baseline risk: %.2f, Estimated standard deviation: %.4f\n",
temp[1],
temp[5]
)
)
cat(
sprintf(
"Risk for specific strategy: %.2f, Estimated standard deviation: %.4f\n",
temp[2],
temp[6]
)
)
cat(sprintf("Relative risk reduction: %.2f\n", temp[3]))
cat(sprintf("Absolute risk: %.2f\n", temp[4]))
cat("Note that the standard deviation of the relative risk reduction can be much higher, and a larger sample size should be used to estimate it well.")
}
else {
updateNumericInput(session, "input_r2", value = input$h2)
updateSliderInput(session, "r2", value = input$h2)
# withMathJax(cat("$$r^2\text{ can't be higher than }h^2$$"))
}
}
})
output$two_traits <- renderPrint({
temp <-
simulate_lowest_risk_two_traits(input$r2_1, input$r2_2, input$rho, input$K_1, input$K_2, input$N_2, input$samples_2)
cat(sprintf("Relative risk reduction for disease 1: %.2f\n", temp[1]))
cat(sprintf("Absolute risk reduction for disease 1: %.2f\n", temp[2]))
cat(sprintf("Relative risk reduction for disease 2: %.2f\n", temp[3]))
cat(sprintf("Absolute risk reduction for disease 2: %.2f\n", temp[4]))
})
output$about_text <- renderPrint({
cat("This calcluator implements the methods from the paper Utility of polygenic embryo screening for
disease depends on the selection strategy.")
})
}
shinyApp(ui = ui, server = server)
update_slider_text <- function(input, session, name_text, name_slider, min, max) {
# text
observeEvent(input[[name_text]],{
input_N2 <- pmin(max, pmax(min, as.numeric(input[[name_text]])))
if(input_N2 != input[[name_slider]] &
!is.na(input_N2) & input_N2 >= min & input_N2 <= max)
{
updateSliderInput(
session = session,
inputId = name_slider,
value = input_N2
)
}
})
# Slider
observeEvent(input[[name_slider]],{
if(as.numeric(input[[name_text]]) != input[[name_slider]])
{
updateTextInput(
session = session,
inputId = name_text,
value = input[[name_slider]]
)
}
})
}
server <- function(input, output, session) {
observeEvent(input$lowestexclude, {
if (input$lowestexclude == "Lowest") {
withMathJax(updateSelectInput(session, "x_var", choices = c("r2", "Disease prevalence", "Number of embryos")))
}
else {
withMathJax(updateSelectInput(session, "x_var", choices = c("r2", "Disease prevalence", "Number of embryos", "Quantile")))
}
})
observeEvent(input$x_var, {
if (input$x_var == "Number of embryos") {
shinyjs::hide("N")
shinyjs::show("r")
shinyjs::show("K")
shinyjs::show("q")
}
else if (input$x_var == "Disease prevalence") {
shinyjs::hide("K")
shinyjs::show("r")
shinyjs::show("N")
shinyjs::show("q")
}
else if (input$x_var == "r2") {
shinyjs::hide("r")
shinyjs::show("N")
shinyjs::show("K")
shinyjs::show("q")
}
else if (input$x_var == "Quantile") {
shinyjs::hide("q")
shinyjs::show("N")
shinyjs::show("K")
shinyjs::show("r")
}
})
update_slider_text(input, session, "input_N2", "N2", 2, 20)
update_slider_text(input, session, "input_K2", "K2", 0.01, 1)
update_slider_text(input, session, "input_r2", "r2", 0, 1)
update_slider_text(input, session ,"input_q2", "q2", 0, 1)
update_slider_text(input, session ,"input_qf2", "qf2", 0, 100)
update_slider_text(input, session ,"input_qm2", "qm2", 0, 100)
update_slider_text(input, session ,"input_h2", "h2", 0, 1)
update_slider_text(input, session ,"input_samples", "samples", 100, 1000000)
output$distPlot <- renderPlot({
# output$distPlot <- renderPlotly({
# selectInput("x_var", "Variable for x axis", choices = c("r2", "K", "N")),
if (input$lowestexclude == "Lowest") {
subtitle <- "Lowest strategy"
}
else {
subtitle <- "Exclude strategy"
}
selected_x <- input$x_var
if(selected_x == "Number of embryos") {
x <- 1:20
if (input$lowestexclude == "Lowest") {
y <- sapply(x, function(x) risk_reduction_lowest(input$r, input$K, n = x))
# if (input$relative_abs == "Absolute risk") y  <- y * input$K
}
else {
y <- sapply(x, function(x) risk_reduction_exclude(r2 = input$r, K = input$K, q = input$q, n = x))
# if (input$relative_abs == "Absolute risk") y  <- y * input$K
}
# subtitle <- "Lowest strategy"
x_lab <- "Number of embryos."
}
else if(selected_x == "Disease prevalence") {
x <- seq(0.01, 1, length = 50)
# y <- sapply(x, function(x) risk_reduction_lowest(input$r, x, n = input$N))
if (input$lowestexclude == "Lowest") {
y <- sapply(x, function(x) risk_reduction_lowest(input$r, x, n = input$N))
# if (input$relative_abs == "Absolute risk") y  <- y * x
}
else {
y <- sapply(x, function(x) risk_reduction_exclude(r2 = input$r, K = x, q = input$q, n = input$N))
# if (input$relative_abs == "Absolute risk") y  <- y * x
}
# subtitle <- "Lowest strategy"
x_lab <- "Disease prevalence."
}
else if(selected_x == "r2" || selected_x == "$$r^2$$") {
x <- seq(0, 1, length = 50)
# y <- sapply(x, function(x) risk_reduction_lowest(x, input$K, n = input$N))
if (input$lowestexclude == "Lowest") {
y <- sapply(x, function(x) risk_reduction_lowest(x, input$K, n = input$N))
# if (input$relative_abs == "Absolute risk") y  <- y * input$K
}
else {
y <- sapply(x, function(x) risk_reduction_exclude(x, input$K, input$q, n = input$N))
# if (input$relative_abs == "Absolute risk") y  <- y * input$K
}
# subtitle <- "Lowest strategy"
x_lab <- "PRS r."
}
else if (selected_x == "Quantile") {
# q
x <- seq(0, 1, length = 50)
y <- sapply(x, function(x) risk_reduction_exclude(input$r, input$K, x, n = input$N))
# if (input$relative_abs == "Absolute risk") y  <- y * input$K
# subtitle <- "Exclude strategy"
x_lab <- "Quantile to exclude."
}
else {
print("Error!")
print(selected_x)
}
# if (input$lowestexclude != "Lowest") {
# ggplotly(ggplot(mapping = aes(x, y)) +
#   geom_point() +
#   geom_line() +
#   theme_minimal() +
#   labs(
#     title = "Risk reduction",
#     subtitle = subtitle,
#     # x = "Percentile PRS to exclude",
#     x = x_lab,
#     y = "Risk reduction"
#   ) +
#   theme(
#     plot.subtitle = element_text(size = 22, hjust = 0.5),
#     plot.title = element_text(size = 25, hjust = 0.5)
#   ))
#   plot_ly(data.frame(x=x, y=y), y=~y, x=~x,
#           name = "", color = I("black")) %>%
#     add_lines() %>%
#     add_markers()
# }
# else {
# ggplotly(ggplot(mapping = aes(x, y)) +
#   geom_point() +
#   geom_line() +
#   theme_minimal() +
#   labs(
#     title = "Risk reduction",
#     subtitle = subtitle,
#     # x = "Number of embroys",
#     x = x_lab,
#     y = "Risk reduction"
#   ) +
#   theme(
#     plot.subtitle = element_text(size = 22, hjust = 0.5),
#     plot.title = element_text(size = 25, hjust = 0.5)
#   ))
#   plot_ly(data.frame(x=x, y=y), y=~y, x=~x,
#           name = "", color = I("black"), showlegend = F) %>%
#     add_lines() %>%
#     add_markers() %>%
#     layout(title = paste0("Risk reduction\n", subtitle),
#            xaxis = list(title = x_lab),
#            yaxis = list(title = "Risk Reduction"))
# }
# plot_ly(data.frame(x=x, y=y), y=~y, x=~x,
#         name = "", color = I("black"), showlegend = F) %>%
#   add_lines() %>%
#   add_markers() %>%
#   layout(title = paste0("Risk reduction\n", subtitle),
#          xaxis = list(title = x_lab),
#          yaxis = list(title = "Risk Reduction"))
ggplot(mapping = aes(x, y)) +
geom_point() +
geom_line() +
theme_minimal() +
labs(
title = "Risk reduction",
subtitle = subtitle,
x = x_lab,
y = "Risk reduction"
) +
theme(
plot.subtitle = element_text(size = 22, hjust = 0.5),
plot.title = element_text(size = 25, hjust = 0.5)
) +
scale_y_continuous(name = "Relative risk reduction",
sec.axis = sec_axis(~.*ifelse(selected_x == "K", x, input$K), name = "Absolute risk reduction"))
})
output$summary <- renderPrint({
# updateSliderInput(inputId = "N2", value = input$N2)
# updateNumericInput(inputId = "N2", value = input$N2)
if (input$type2 == "Risk reduction") {
temp <- risk_reduction_lowest(input$r2, K = input$K2, n = input$N2)
if (input$lowestexclude2 != "Lowest") {
temp <-
risk_reduction_exclude(input$r2,
K = input$K2,
q = input$q2,
n = input$N2)
}
cat(sprintf("Relative risk reduction: %.2f\n", temp))
cat(sprintf("Absolute risk reduction: %.2f", temp * input$K2))
}
else if (input$type2 == "Conditional") {
temp <-
risk_reduction_lowest_conditional(
input$r2,
K = input$K2,
n = input$N2,
qf = input$qf2,
qm = input$qm2,
relative = T,
parental_avg_given = F
)
if (input$lowestexclude2 != "Lowest") {
temp <-
risk_reduction_exclude_conditional(
input$r2,
K = input$K2,
q = input$q2,
n = input$N2,
qf = input$qf2,
qm = input$qm2,
relative = T
)
}
cat(sprintf("Relative risk reduction: %.2f\n", temp))
cat(sprintf("Absolute risk reduction: %.2f", temp * input$K2))
}
else {
if (input$r2 > input$h2) {
updateNumericInput(session, "input_r2", value = input$h2)
updateSliderInput(session, "r2", value = input$h2)
}
if (input$r2 <= input$h2) {
if (input$lowestexclude2 != "Lowest") {
temp <-
risk_reduction_exclude_family_history2(
input$r2,
h2 = input$h2,
K = input$K2,
q = input$q2,
n = input$N2,
input$df2,
input$dm2,
n_samples = input$samples
)
}
else {
temp <-
risk_reduction_lowest_family_history2(
input$r2,
h2 = input$h2,
K = input$K2,
n = input$N2,
input$df2,
input$dm2,
n_samples = input$samples
)
}
cat(
sprintf(
"Baseline risk: %.2f, Estimated standard deviation: %.4f\n",
temp[1],
temp[5]
)
)
cat(
sprintf(
"Risk for specific strategy: %.2f, Estimated standard deviation: %.4f\n",
temp[2],
temp[6]
)
)
cat(sprintf("Relative risk reduction: %.2f\n", temp[3]))
cat(sprintf("Absolute risk: %.2f\n", temp[4]))
cat("Note that the standard deviation of the relative risk reduction can be much higher, and a larger sample size should be used to estimate it well.")
}
else {
updateNumericInput(session, "input_r2", value = input$h2)
updateSliderInput(session, "r2", value = input$h2)
# withMathJax(cat("$$r^2\text{ can't be higher than }h^2$$"))
}
}
})
output$two_traits <- renderPrint({
temp <-
simulate_lowest_risk_two_traits(input$r2_1, input$r2_2, input$rho, input$K_1, input$K_2, input$N_2, input$samples_2)
cat(sprintf("Relative risk reduction for disease 1: %.2f\n", temp[1]))
cat(sprintf("Absolute risk reduction for disease 1: %.2f\n", temp[2]))
cat(sprintf("Relative risk reduction for disease 2: %.2f\n", temp[3]))
cat(sprintf("Absolute risk reduction for disease 2: %.2f\n", temp[4]))
})
output$about_text <- renderPrint({
cat("This calcluator implements the methods from the paper Utility of polygenic embryo screening for
disease depends on the selection strategy.")
})
}
shinyApp(ui = ui, server = server)
data(cars)
data(cats, package = "MASS")
library(RohMut)
data(fs_cousins, package = "RohMoh")
data(fs_cousins, package = "RohMut")
data(refined_mf, package = "RohMut")
refined_mf
data(refined_mf, package = "RohMut")
library(RohMut)
data(fs_cousins, package = "RohMut")
data(refined_mf, package = "RohMut")
refined_mf
fs_cousins
fs_cousins[1,]
?data
?fread
fread("data\fs_cousins", package = "RohMut")
libra\
library(data.table)
fread("data\fs_cousins", package = "RohMut")
fread("data\fs_cousins")
fread("data\fs_cousins")
fread("data/fs_cousins")
fread
fread("data/fs_cousins.csv")
data <- fread("data/fs_cousins.csv")
map <- fread("data/refined_mf.csv")
data
map
RohMut::cpp_em(a[1], a[2],
data$mutation, data$length,
indexes, 1, 0, cbind(rep(1, length(indexes)),
rep(0, length(indexes))))[1:2]
RohMut::cpp_em(2.5e-9, 7.5e-9,
data$mutation, data$length,
indexes, 1, 0, cbind(rep(1, length(indexes)),
rep(0, length(indexes))))[1:2]
RohMut::cpp_em(2.5e-9, 7.5e-9,
data$mutation, data$length,
split(1:nrow(data)-1, data$subject), 1, 0, cbind(rep(1, length(indexes)),
rep(0, length(indexes))))[1:2]
RohMut::cpp_em(2.5e-9, 7.5e-9,
data$mutation, data$length,
split(1:nrow(data)-1, data$subject), 1, 0, cbind(rep(1, length(split(1:nrow(data)-1, data$subject))),
rep(0, length(split(1:nrow(data)-1, data$subject)))))[1:2]
RohMut::cpp_em(2.5e-9, 7.5e-9,
data$mutation, data$length,
split(1:nrow(data)-1, data$subject), 10, 0, cbind(rep(1, length(split(1:nrow(data)-1, data$subject))),
rep(0, length(split(1:nrow(data)-1, data$subject)))))[1:2]
RohMut::cpp_em(2.5e-9, 7.5e-9,
data$mutation, data$length,
split(1:nrow(data)-1, data$subject), 100, 0, cbind(rep(1, length(split(1:nrow(data)-1, data$subject))),
rep(0, length(split(1:nrow(data)-1, data$subject)))))[1:2]
RohMut::cpp_em(2.5e-9, 7.5e-9,
data$mutation, data$length,
split(1:nrow(data)-1, data$subject), 100, 0, cbind(rep(1, length(split(1:nrow(data)-1, data$subject))),
rep(0, length(split(1:nrow(data)-1, data$subject)))), stochastic = T)[1:2]
RohMut::cpp_em(2.5e-9, 7.5e-9,
data$mutation, data$length,
split(1:nrow(data)-1, data$subject), 100, 0, cbind(rep(1, length(split(1:nrow(data)-1, data$subject))),
rep(0, length(split(1:nrow(data)-1, data$subject)))), stochastic = T)[1:2]
RohMut::cpp_em(2.5e-9, 7.5e-9,
data$mutation, data$length,
split(1:nrow(data)-1, data$subject), 100, 0, cbind(rep(1, length(split(1:nrow(data)-1, data$subject))),
rep(0, length(split(1:nrow(data)-1, data$subject)))), stochastic = T)[1:2]
RohMut::cpp_em(2.5e-9, 7.5e-9,
data$mutation, data$length,
split(1:nrow(data)-1, data$subject), 1000, 0, cbind(rep(1, length(split(1:nrow(data)-1, data$subject))),
rep(0, length(split(1:nrow(data)-1, data$subject)))), stochastic = T)[1:2]
data <- KRIS::read.bed("/home/somename/Desktop/New/R/dog data/ShannonBoyko_Merged.bed",
"/home/somename/Desktop/New/R/dog data/ShannonBoyko_Merged.bim",
"/home/somename/Desktop/New/R/dog data/ShannonBoyko_Merged.fam")
data
data$snp
data$snp[1,]
data$snp[2,]
data$snp[1,]
data$snp.info
data$ind.info
data$snp.info$allele1
data$snp.info$allele2
data$snp.info$GD
detectRUNS:::slidingWindow(data$snp[1,], diff(c(0, data$snp.info$position)), 10, 10, 10^6)
sum(detectRUNS:::slidingWindow(data$snp[1,], diff(c(0, data$snp.info$position)), 10, 10, 10^6) == "1")
temp <- detectRUNS:::slidingWindow(data$snp[1,], diff(c(0, data$snp.info$position)), 10, 10, 10^6)
temp <- detectRUNS:::slidingWindow(data$snp[1,], diff(c(0, data$snp.info$position)), 15, 10, 10^6)
sum(temp == "0")
temp
temp$windowStatus
mean(temp$windowStatus)
sum(temp$windowStatus)
mean(temp$windowStatus)
temp <- detectRUNS:::slidingWindow(data$snp[1,], diff(c(0, data$snp.info$position)), 15, 100, 10^6)
mean(temp$windowStatus)
temp <- detectRUNS:::slidingWindow(data$snp[1,], diff(c(0, data$snp.info$position)), 15, 2, 10^6)
temp <- detectRUNS:::slidingWindow(data$snp[1,], diff(c(0, data$snp.info$position)), 15, 5, 10^6)
mean(temp$windowStatus)
