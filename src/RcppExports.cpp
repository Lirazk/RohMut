// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// cpp_likelihood_hier
double cpp_likelihood_hier(double mu_f, double mu_m, const NumericVector& d, const NumericVector& len, const List& indexes, const NumericVector& male_map, const NumericVector& female_map, const NumericVector& male_start, const NumericVector& female_start, const NumericVector& male_end, const NumericVector& female_end, const NumericMatrix& prob);
RcppExport SEXP _RohMut_cpp_likelihood_hier(SEXP mu_fSEXP, SEXP mu_mSEXP, SEXP dSEXP, SEXP lenSEXP, SEXP indexesSEXP, SEXP male_mapSEXP, SEXP female_mapSEXP, SEXP male_startSEXP, SEXP female_startSEXP, SEXP male_endSEXP, SEXP female_endSEXP, SEXP probSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type mu_f(mu_fSEXP);
    Rcpp::traits::input_parameter< double >::type mu_m(mu_mSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type d(dSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type len(lenSEXP);
    Rcpp::traits::input_parameter< const List& >::type indexes(indexesSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type male_map(male_mapSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type female_map(female_mapSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type male_start(male_startSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type female_start(female_startSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type male_end(male_endSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type female_end(female_endSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type prob(probSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_likelihood_hier(mu_f, mu_m, d, len, indexes, male_map, female_map, male_start, female_start, male_end, female_end, prob));
    return rcpp_result_gen;
END_RCPP
}
// cpp_em_map
NumericVector cpp_em_map(double mu1, double mu2, const NumericVector& mutation, const NumericVector& len, List& indexes, int maxiter, double eps, const NumericMatrix& prob, IntegerVector male_map, IntegerVector female_map, NumericVector male_start, NumericVector female_start, NumericVector male_end, NumericVector female_end, bool stochastic, bool estimate_intercept, double intercept);
RcppExport SEXP _RohMut_cpp_em_map(SEXP mu1SEXP, SEXP mu2SEXP, SEXP mutationSEXP, SEXP lenSEXP, SEXP indexesSEXP, SEXP maxiterSEXP, SEXP epsSEXP, SEXP probSEXP, SEXP male_mapSEXP, SEXP female_mapSEXP, SEXP male_startSEXP, SEXP female_startSEXP, SEXP male_endSEXP, SEXP female_endSEXP, SEXP stochasticSEXP, SEXP estimate_interceptSEXP, SEXP interceptSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type mu1(mu1SEXP);
    Rcpp::traits::input_parameter< double >::type mu2(mu2SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mutation(mutationSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type len(lenSEXP);
    Rcpp::traits::input_parameter< List& >::type indexes(indexesSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type prob(probSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type male_map(male_mapSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type female_map(female_mapSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type male_start(male_startSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type female_start(female_startSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type male_end(male_endSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type female_end(female_endSEXP);
    Rcpp::traits::input_parameter< bool >::type stochastic(stochasticSEXP);
    Rcpp::traits::input_parameter< bool >::type estimate_intercept(estimate_interceptSEXP);
    Rcpp::traits::input_parameter< double >::type intercept(interceptSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_em_map(mu1, mu2, mutation, len, indexes, maxiter, eps, prob, male_map, female_map, male_start, female_start, male_end, female_end, stochastic, estimate_intercept, intercept));
    return rcpp_result_gen;
END_RCPP
}
// cpp_em
NumericVector cpp_em(double mu1, double mu2, const IntegerVector& mutation, const IntegerVector& len, List& indexes, int maxiter, double eps, const NumericMatrix& prob, bool stochastic, bool estimate_intercept, double intercept);
RcppExport SEXP _RohMut_cpp_em(SEXP mu1SEXP, SEXP mu2SEXP, SEXP mutationSEXP, SEXP lenSEXP, SEXP indexesSEXP, SEXP maxiterSEXP, SEXP epsSEXP, SEXP probSEXP, SEXP stochasticSEXP, SEXP estimate_interceptSEXP, SEXP interceptSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type mu1(mu1SEXP);
    Rcpp::traits::input_parameter< double >::type mu2(mu2SEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type mutation(mutationSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type len(lenSEXP);
    Rcpp::traits::input_parameter< List& >::type indexes(indexesSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type prob(probSEXP);
    Rcpp::traits::input_parameter< bool >::type stochastic(stochasticSEXP);
    Rcpp::traits::input_parameter< bool >::type estimate_intercept(estimate_interceptSEXP);
    Rcpp::traits::input_parameter< double >::type intercept(interceptSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_em(mu1, mu2, mutation, len, indexes, maxiter, eps, prob, stochastic, estimate_intercept, intercept));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_RohMut_cpp_likelihood_hier", (DL_FUNC) &_RohMut_cpp_likelihood_hier, 12},
    {"_RohMut_cpp_em_map", (DL_FUNC) &_RohMut_cpp_em_map, 17},
    {"_RohMut_cpp_em", (DL_FUNC) &_RohMut_cpp_em, 11},
    {NULL, NULL, 0}
};

RcppExport void R_init_RohMut(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
